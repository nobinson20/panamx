// Perceptron Learning Algorithm
int sign(double x) {
  if (x > 0.0) {
    return 1;
  }
  if (x < 0.0) {
    return -1;
  }
  return 0;
}

int f(matrix X, matrix w) {
  double sum;
  matrix tmp;
  sum = 0.0;
  tmp = X * trans(w);
  sum = tmp[0][0];
  return sign(sum);
}

matrix perceptron(matrix df) {
  matrix X;
  matrix Y;
  matrix ones;
  matrix w;
  matrix output;
  matrix prev_w;
  int n;
  int i;
  matrix diffvec;
  double diff;
  int iter;

  n = matrixHeight(df);
  X = df[0:n][0:2];
  Y = df[0:n][2:3];
  ones = <n, 1>;
  for (i = 0; i < n; i++) {
    ones[i][0] = 1;
  }
  X = concatLR(X, ones);
  w = [0, 0, 0];
  output = [0, 0, 0];

  iter = 1;
  while (diff != 0.0) {
    diff = 0.0;
    prev_w = w;
    for (i = 0; i < n; i++) {
      if (Y[i][0] * f(X[i:i+1][0:3], w) <= 0.0) {
        w = w + Y[i][0] * X[i:i+1][0:3];
      }
    }
    diffvec = w - prev_w;
    diff = 0.0;
    for (i = 0; i < 3; i++) {
      diff = diff + absd(diffvec[0][i]);
    }
    iter = iter + 1;
    output = concatTB(output, w);
  }
  n = matrixHeight(output);
  output = output[1:n][0:3];
  return output;
}

int main() {
    matrix df;
    matrix res;
    int last;
    df = [8, -11, 1;
         7, 7, -1;
         12, -20, 1;
         14, -3, -1;
         12, 8, -1;
         1, -12, 1;
         15, 5, -1;
         7, -10, 1;
         10, 4, -1;
         6, 2, 1;
         8, 12, -1;
         2, 20, -1;
         1, -12, 1;
         9, 8, -1;
         3, 3, 1;
         5, 6, 1;
         1, 11, 1];

    prints("Input Data:");
    printm(df);

    res = perceptron(df);

    prints("Output Results:");
    printm(res);

    prints("Decision Boundary:");
    last = matrixHeight(res);
    res = res[last-1:last][0:3];
    printm(res);

    prints("Slope:");
    printf(-res[0][0]/res[0][1]);

    prints("Offset:");
    printf(res[0][2]/res[0][1]);

    return 0;
}
